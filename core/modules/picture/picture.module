<?php

/**
 * @file
 * Picture display formatter for image fields.
 */

use Drupal\picture\Plugin\Core\Entity\PictureMapping;
use \Drupal\Core\Template\Attribute;

/**
 * Implements hook_help().
 */
function picture_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#picture':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Picture module provides an image formatter and breakpoint mappings to output responsive images using the HTML5 picture tag.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Mapping image styles to breakpoints') . '</dt>';
      $output .= '<dd>' . t('To use responsive images, you need to define what size the images should be depending on the breakpoints. The Picture module allows you to define which image style should be used for each breakpoint on the <a href="@link">picture mappings administrative page</a>.', array(
        '@link' => url('admin/config/media/picturemapping'),
      )) . '</dd>';
      $output .= '<dt>' . t('Formatting an Image field') . '</dt>';
      $output .= '<dd>' . t('Images in Image fields can be formatted using the Picture formatter, to make them responsive. They will be automatically resized depending on breakpoints.') . '</dd>';
      $output .= '</dl>';
      break;
    case 'admin/config/media/picturemapping':
      $output .= '<p>' . t('A picture mapping associates an image style with each breakpoint defined by your theme.') . '</p>';
      break;

  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function picture_permission() {
  return array(
    'administer pictures' => array(
      'title' => t('Administer Pictures'),
      'description' => t('Administer Pictures'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function picture_menu() {
  $items = array();

  $items['admin/config/media/picturemapping'] = array(
    'title' => 'Picture Mappings',
    'description' => 'Manage picture mappings',
    'access arguments' => array('administer pictures'),
    'weight' => 10,
    'page callback' => 'picture_mapping_page',
    'file' => 'picture_mapping.admin.inc',
  );
  $items['admin/config/media/picturemapping/add'] = array(
    'title' => 'Add picture mapping',
    'page callback' => 'picture_mapping_page_add',
    'access callback' => 'user_access',
    'access arguments' => array('administer pictures'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'picture_mapping.admin.inc',
  );
  $items['admin/config/media/picturemapping/%picture_mapping/edit'] = array(
    'title' => 'Edit picture mapping',
    'page callback' => 'picture_mapping_page_edit',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('administer pictures'),
    'file' => 'picture_mapping.admin.inc',
  );
  $items['admin/config/media/picturemapping/%picture_mapping/duplicate'] = array(
    'title' => 'Duplicate picture mapping',
    'page callback' => 'picture_mapping_page_duplicate',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('administer pictures'),
    'file' => 'picture_mapping.admin.inc',
  );
  $items['admin/config/media/picturemapping/%picture_mapping/delete'] = array(
    'title' => 'Delete',
    'route_name' => 'picture_mapping_action_confirm',
  );

  return $items;
}

/**
 * Implements hook_library_info().
 */
function picture_library_info() {
  $libraries['picturefill'] = array(
    'title' => t('Picturefill'),
    'website' => 'http://drupal.org/node/1775530',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'picture') . '/picturefill/picturefill.js' => array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT),
    ),
    'dependencies' => array(
      array('system', 'matchmedia'),
    ),
  );
  return $libraries;
}

/**
 * Load one picture by its identifier.
 *
 * @param int $id
 *   The id of the picture mapping to load.
 *
 * @return Drupal\picture\Picture
 *   The entity object, or FALSE if there is no entity with the given id.
 *
 * @todo Needed for menu_callback
 *
 * @see http://drupal.org/node/1798214
 *
 */
function picture_mapping_load($id) {
  return entity_load('picture_mapping', $id);
}

/**
 * Gets Picture uri callback.
 */
function picture_mapping_uri(PictureMapping $picture_mapping) {
  return array(
    'path' => 'admin/config/media/picturemapping/' . $picture_mapping->id(),
  );
}

/**
 * Sets Picture uri callback.
 */
function picture_mapping_set_uri(PictureMapping $picture_mapping) {
  return array(
    'path' => 'admin/config/media/picturemapping/' . $picture_mapping->id(),
  );
}

/**
 * Implements hook_theme().
 */
function picture_theme() {
  return array(
    'picture' => array(
      'variables' => array(
        'style_name' => NULL,
        'uri' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
        'breakpoints' => array(),
      ),
      'template' => 'picture',
    ),
    'picture_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'image_style' => NULL,
        'breakpoints' => array(),
      ),
      'template' => 'picture-formatter',
    ),
    'picture_source' => array(
      'variables' => array(
        'src' => NULL,
        'srcset' => NULL,
        'dimensions' => array(),
        'media' => NULL,
      ),
      'template' => 'picture-source',
    ),
  );
}

/**
 * Prepares variables for picture formatter templates.
 *
 * Default template: picture-formatter.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: An array of image data.
 *   - image_style: An optional image style.
 *   - path: An optional array containing the link 'path' and link 'options'.
 *   - breakpoints: An array containing breakpoints.
 */
function template_preprocess_picture_formatter(&$variables) {
  if (!isset($variables['breakpoints']) || empty($variables['breakpoints'])) {
    $variables['image'] = array(
      '#theme' => 'image_formatter',
      '#item' => $variables['item'],
      '#image_style' => $variables['image_style'],
      '#path' => $variables['path'],
    );
  }
  else {
    $item = $variables['item'];

    // Do not output an empty 'title' attribute.
    if (isset($item['title']) && drupal_strlen($item['title']) == 0) {
      unset($item['title']);
    }

    $variables['image'] = array(
      '#theme' => 'picture',
      '#style_name' => $variables['image_style'],
      '#uri' => $item['uri'],
      '#width' => $item['width'],
      '#height' => $item['height'],
      '#breakpoints' => $variables['breakpoints'],
      '#alt' => isset($item['alt']) ? $item['alt'] : NULL,
      '#title' => isset($item['title']) ? $item['title'] : NULL,
      '#attributes' => isset($item['attributes']) ? $item['attributes'] : NULL,
    );

    if (isset($variables['path']['path'])) {
      $variables['path']['attributes'] = isset($variables['path']['options']['attributes']) ? new Attribute($variables['path']['options']['attributes']) : new Attribute();
      $options = isset($variables['path']['options']) ? $variables['path']['options'] : array();
      $variables['path']['path'] = url($variables['path']['path'], $options);
    }
  }
}

/**
 * Prepares variables for picture templates.
 *
 * Default template: picture.html.twig.
 *
 * @param $variables
 *   An associative array containing:
 *   - uri: Either the path of the image file (relative to base_path()) or a
 *     full URL.
 *   - width: The width of the image (if known).
 *   - height: The height of the image (if known).
 *   - alt: The alternative text for text-based browsers.
 *   - breakpoints: An array containing breakpoints.
 */
function template_preprocess_picture(&$variables) {
  // Make sure that width and height are proper values
  // If they exists we'll output them
  // @see http://www.w3.org/community/respimg/2012/06/18/florians-compromise/
  if (isset($variables['width']) && empty($variables['width'])) {
    unset($variables['width']);
    unset($variables['height']);
  }
  elseif (isset($variables['height']) && empty($variables['height'])) {
    unset($variables['width']);
    unset($variables['height']);
  }

  $variables['sources'] = array();

  // Fallback image, output as source with media query.
  $variables['sources'][] = array(
    '#theme' => 'picture_source',
    '#src' => image_style_url($variables['style_name'], $variables['uri']),
    '#dimensions' => picture_get_image_dimensions($variables),
  );

  // All breakpoints and multipliers.
  foreach ($variables['breakpoints'] as $breakpoint_name => $multipliers) {
    $breakpoint = breakpoint_load($breakpoint_name);
    if ($breakpoint) {
      $new_sources = array();
      foreach ($multipliers as $multiplier => $image_style) {
        $new_source = $variables;
        $new_source['style_name'] = $image_style;
        $new_source['#multiplier'] = $multiplier;
        $new_sources[] = $new_source;
      }

      // Only one image, use src.
      if (count($new_sources) == 1) {
        $variables['sources'][] = array(
          '#theme' => 'picture_source',
          '#src' => image_style_url($new_sources[0]['style_name'], $new_sources[0]['uri']),
          '#dimensions' => picture_get_image_dimensions($new_sources[0]),
          '#media' => $breakpoint->mediaQuery,
        );
      }
      else {
        // Multiple images, use srcset.
        $srcset = array();
        foreach ($new_sources as $new_source) {
          $srcset[] = image_style_url($new_source['style_name'], $new_source['uri']) . ' ' . $new_source['#multiplier'];
        }
        $variables['sources'][] = array(
          '#theme' => 'picture_source',
          '#srcset' => implode(', ', $srcset),
          '#dimensions' => picture_get_image_dimensions($new_sources[0]),
          '#media' => $breakpoint->mediaQuery,
        );
      }
    }
  }

  // Prepare picture tag attributes.
  $attributes = array();
  foreach (array('alt', 'title') as $key) {
    if (isset($variables[$key])) {
      $attributes[$key] = $variables[$key];
    }
  }
  $variables['attributes'] = new Attribute($attributes);

  // Prepare noscript fallback image.
  $variables['fallback'] = array(
    '#theme' => 'image_style',
    '#uri' => $variables['uri'],
    '#width' => $variables['width'],
    '#height' => $variables['height'],
    '#style_name' => $variables['style_name'],
    '#alt' => isset($variables['alt']) ? $variables['alt'] : NULL,
    '#title' => isset($variables['title']) ? $variables['title'] : NULL,
  );
}

/**
 * Prepares variables for source tag templates.
 *
 * Default template: picture-source.html.twig.
 *
 * @param type $variables
 *   An associative array containing:
 *   - media: The media query to use.
 *   - srcset: The srcset containing the the path of the image file or a full
 *     URL and optionally multipliers.
 *   - src: Either the path of the image file (relative to base_path()) or a
 *     full URL.
 *   - dimensions: An array containing the width and height of the image (if
 *     known).
 */
function template_preprocess_picture_source(&$variables) {
  $attributes = array();
  foreach (array('media', 'src', 'srcset') as $attribute) {
    if (!empty($variables[$attribute])) {
      $attributes[$attribute] = $variables[$attribute];
      unset($variables[$attribute]);
    }
  }
  $attributes += $variables['dimensions'];
  unset($variables['dimensions']);

  $variables['attributes'] = new Attribute($attributes);
  // Create a duplicate attributes variable to allow printing the attributes
  // twice.
  $variables['attributes_copy'] = new Attribute($attributes);
}

/**
 * Determines the dimensions of an image.
 *
 * @param $variables
 *   An associative array containing:
 *   - style_name: The name of the style to be used to alter the original image.
 *   - width: The width of the source image (if known).
 *   - height: The height of the source image (if known).
 *
 * @return array
 *   Dimensions to be modified - an array with components width and height, in
 *   pixels.
 */
function picture_get_image_dimensions($variables) {
  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
  );

  image_style_transform_dimensions($variables['style_name'], $dimensions);

  return $dimensions;
}
