<?php

/**
 * @file
 * Admin page callbacks for the block module.
 */

use Drupal\block\Plugin\Core\Entity\Block;
use Drupal\Core\Template\Attribute;

/**
 * Page callback: Attaches CSS for the block region demo.
 *
 * @see block_menu()
 */
function block_admin_demo($theme = NULL) {
  drupal_add_css(drupal_get_path('module', 'block') . '/block.admin.css');
  return '';
}

/**
 * Page callback: Shows the block administration page.
 *
 * @param string $theme
 *   The theme to display the administration page for.
 *
 * @return array
 *   A render array for a page containing a list of blocks.
 *
 * @see block_menu()
 */
function block_admin_display($theme) {
  return drupal_container()->get('plugin.manager.entity')
    ->getListController('block')
    ->render($theme);
}

/**
 * Page callback: Build the block instance add form.
 *
 * @param string $plugin_id
 *   The plugin ID for the block instance.
 * @param string $theme
 *   The name of the theme for the block instance.
 *
 * @return array
 *   The block instance edit form.
 */
function block_admin_add($plugin_id, $theme) {
  $entity = entity_create('block', array(
    'plugin' => $plugin_id,
    'theme' => $theme,
  ));
  return entity_get_form($entity);
}

/**
 * Page callback: Build the block instance edit form.
 *
 * @param \Drupal\block\Plugin\Core\Entity\Block $entity
 *   The block instance.
 *
 * @return array
 *   The block instance edit form.
 */
function block_admin_edit(Block $entity) {
  // Get the theme for the page title.
  $admin_theme = config('system.theme')->get('admin');
  $themes = list_themes();
  $theme_key = $entity->get('theme');
  $theme = $themes[$theme_key];
  // Use meaningful titles for the main site and administrative themes.
  $theme_title = $theme->info['name'];
  if ($theme_key == config('system.theme')->get('default')) {
    $theme_title = t('!theme (default theme)', array('!theme' => $theme_title));
  }
  elseif ($admin_theme && $theme_key == $admin_theme) {
    $theme_title = t('!theme (administration theme)', array('!theme' => $theme_title));
  }

  // Get the block label for the page title.
  drupal_set_title(t("Configure %label block in %theme", array('%label' => $entity->label(), '%theme' => $theme_title)), PASS_THROUGH);

  return entity_get_form($entity);
}

/**
 * Form constructor for the block instance deletion form.
 *
 * @param \Drupal\block\Plugin\Core\Entity\Block $entity
 *   The block instance.
 *
 * @see block_menu()
 * @see block_admin_block_delete_submit()
 */
function block_admin_block_delete(array $form, array &$form_state, Block $entity) {
  $form['id'] = array('#type' => 'value', '#value' => $entity->id());

  return confirm_form($form, t('Are you sure you want to delete the block %name?', array('%name' => $entity->label())), 'admin/structure/block', '', t('Delete'), t('Cancel'));
}

/**
 * Form submission handler for block_admin_block_delete().
 *
 * @see block_admin_block_delete()
 */
function block_admin_block_delete_submit($form, &$form_state) {
  $entity = entity_load('block', $form_state['values']['id']);
  drupal_set_message(t('The block %name has been removed.', array('%name' => $entity->label())));
  $form_state['redirect'] = 'admin/structure/block/list/block_plugin_ui:' . $entity->get('theme');
  $entity->delete();
}

/**
 * Prepares variables for block admin display form templates.
 *
 * Default template: block-admin-display-form.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 */
function template_preprocess_block_admin_display_form(&$variables) {
  $header = array(t('Block'), t('Region'), t('Weight'), t('Operations'));
  // @todo Remove/refactor pending http://drupal.org/node/1920886.
  $children = $variables['form'];

  $variables['block_regions'] = $variables['form']['block_regions']['#value'];
  if (isset($variables['block_regions'][BLOCK_REGION_NONE])) {
    $variables['block_regions'][BLOCK_REGION_NONE] = t('Disabled');
  }

  foreach ($variables['block_regions'] as $key => $value) {
    // Initialize an empty array for the region.
    $block_listing[$key] = array();
  }

  // Initialize disabled blocks array.
  $block_listing[BLOCK_REGION_NONE] = array();

  // Add each block in the form to the appropriate place in the block listing.
  foreach (element_children($variables['form']['blocks']) as $i) {
    $block = &$variables['form']['blocks'][$i];

    // Fetch the region for the current block.
    $region = (isset($block['region']['#default_value']) ? $block['region']['#default_value'] : BLOCK_REGION_NONE);

    // Set special classes needed for table drag and drop.
    $block['region']['#attributes']['class'] = array('block-region-select', 'block-region-' . $region);
    $block['weight']['#attributes']['class'] = array('block-weight', 'block-weight-' . $region);

    $block_listing[$region][$i] = new stdClass();
    $block_listing[$region][$i]->row_class = !empty($block['#attributes']['class']) ? implode(' ', $block['#attributes']['class']) : '';
    $block_listing[$region][$i]->block_modified = !empty($block['#attributes']['class']) && in_array('block-modified', $block['#attributes']['class']);
    $block_listing[$region][$i]->block_title = $block['info'];
    $block_listing[$region][$i]->region_select = array(
      'region' => array(
        'data' => $block['region'],
        '#weight' => 1,
      ),
      'theme' => array(
        'data' => $block['theme'],
        '#weight' => 2,
      ),
    );
    $block_listing[$region][$i]->weight_select = $block['weight'];
    $block_listing[$region][$i]->operations = $block['operations'];
    $block_listing[$region][$i]->printed = FALSE;
  }

  $rows = array();
  foreach ($block_listing as $region => $block_list) {
    $rows[] = array(
      'data' => array(
        array('data' => t($variables['block_regions'][$region]), 'colspan' => 4),
      ),
      'class' => array('region-title region-title-' . $region)
    );
    $rows[] = array(
      'data' => array(
        array('data' => '<em>'. t('No blocks in this region ') . '</em>', 'colspan' => 4),
      ),
      'class' => array('region-message', 'region-' . $region . '-message', empty($block_listing[$region]) ? 'region-empty' : 'region-populated')
    );
    foreach ($block_list as $key => $block) {
      $rows[] = array(
        'data' => array(
          array('data' => $block->block_title),
          array('data' => $block->region_select),
          array('data' => $block->weight_select),
          array('data' => $block->operations),
        ),
        'class' => array('draggable'),
      );
    }
  }
  $attributes = new Attribute(array('id' => 'blocks', 'class' => array()));
  drupal_add_tabledrag('blocks', 'order', 'sibling', 'block-weight');
  $variables['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => $attributes,
  );
  // Remove elements from the 'children' render array.
  // @todo Refactor when http://drupal.org/node/1920886 is resolved.
  unset($children['blocks'], $children['block_regions']);
  $variables['children'] = drupal_render_children($children);
}
