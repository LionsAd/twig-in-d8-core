<?php

/**
 * @file
 * Page callbacks for simpletest module.
 */

use Drupal\Core\Template\Attribute;

/**
 * List tests arranged in groups that can be selected and run.
 */
function simpletest_test_form($form, &$form_state) {
  $form['tests'] = array(
    '#type' => 'details',
    '#title' => t('Tests'),
    '#description' => t('Select the test(s) or test group(s) you would like to run, and click <em>Run tests</em>.'),
  );

  $form['tests']['table'] = array(
    '#theme' => 'simpletest_test_table',
  );

  // Generate the list of tests arranged by group.
  $groups = simpletest_test_get_all();
  $groups['PHPUnit'] = simpletest_phpunit_get_available_tests();
  $form_state['storage']['PHPUnit'] = $groups['PHPUnit'];

  foreach ($groups as $group => $tests) {
    $form['tests']['table'][$group] = array(
      '#collapsed' => TRUE,
    );

    foreach ($tests as $class => $info) {
      $form['tests']['table'][$group][$class] = array(
        '#type' => 'checkbox',
        '#title' => $info['name'],
        '#description' => $info['description'],
      );
    }
  }

  // Operation buttons.
  $form['tests']['op'] = array(
    '#type' => 'submit',
    '#value' => t('Run tests'),
  );
  $form['clean'] = array(
    '#type' => 'fieldset',
    '#title' => t('Clean test environment'),
    '#description' => t('Remove tables with the prefix "simpletest" and temporary directories that are left over from tests that crashed. This is intended for developers when creating tests.'),
  );
  $form['clean']['op'] = array(
    '#type' => 'submit',
    '#value' => t('Clean environment'),
    '#submit' => array('simpletest_clean_environment'),
  );

  return $form;
}

/**
 * Prepares variables for test list table templates.
 *
 * Default template: simpletest-test-table.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - table: A render element representing the table.
 */
function template_preprocess_simpletest_test_table(&$variables) {
  $table = $variables['table'];

  drupal_add_library('simpletest', 'drupal.simpletest');

  // Define the images used to expand/collapse the test groups.
  $js = array(
    'images' => array(
      theme('image', array('uri' => 'core/misc/menu-collapsed.png', 'width' => 7, 'height' => 7, 'alt' => t('Expand'), 'title' => t('Expand'))) . ' <a href="#" class="simpletest-collapse">(' . t('Expand') . ')</a>',
      theme('image', array('uri' => 'core/misc/menu-expanded.png', 'width' => 7, 'height' => 7, 'alt' => t('Collapse'), 'title' => t('Collapse'))) . ' <a href="#" class="simpletest-collapse">(' . t('Collapse') . ')</a>',
    ),
  );

  // Cycle through each test group and create a row.

  $variables['test_groups'] = array();
  foreach (element_children($table) as $key) {
    $element = &$table[$key];

    $variables['test_groups'][$key] = new stdClass();

    // Make the class name safe for output on the page by replacing all
    // non-word/decimal characters with a dash (-).
    $test_class = strtolower(trim(preg_replace("/[^\w\d]/", "-", $key)));
    $variables['test_groups'][$key]->test_class = $test_class;

    // Select the right "expand"/"collapse" image, depending on whether the
    // category is expanded (at least one test selected) or not.
    $collapsed = !empty($element['#collapsed']);
    $image_index = $collapsed ? 0 : 1;

    // Expand/collapse image and group title.
    $variables['test_groups'][$key]->label = $key;

    // Add individual tests to group.
    $current_js = array(
      'testClass' => $test_class . '-test',
      'testNames' => array(),
      'imageDirection' => $image_index,
      'clickActive' => FALSE,
    );

    // Sorting $element by children's #title attribute instead of by class name.
    uasort($element, 'element_sort_by_title');

    $variables['test_groups'][$key]->tests = array();

    // Cycle through each test within the current group.
    foreach (element_children($element) as $test_name) {
      $test = $element[$test_name];
      $test_data = new stdClass();
      $test_data->attributes = new Attribute(array('class' => array()));
      $test_data->id = $test['#id'];

      $current_js['testNames'][] = $test['#id'];

      // Store test title and description so that checkbox won't render them.
      $test_data->title = $test['#title'];
      $test_data->description = $test['#description'];
      unset($test['#description']);

      $test['#title_display'] = 'invisible';

      // Test name is used to determine what tests to run.
      $test['#name'] = $test_name;

      // Add the checkbox field.
      $test_data->field = $test;

      $test_data->attributes['class'][] = $test_class . '-test';
      $test_data->attributes['class'][] = ($collapsed ? 'js-hide' : '');

      $variables['test_groups'][$key]->tests[$test_name] = $test_data;
    }
    $js['simpletest-test-group-' . $test_class] = $current_js;
  }

  // Add js array of settings.
  drupal_add_js(array('simpleTest' => $js), 'setting');
}

/**
 * Run selected tests.
 */
function simpletest_test_form_submit($form, &$form_state) {
  // Get list of tests.
  $tests_list = array();
  simpletest_classloader_register();

  $phpunit_all = array_keys($form_state['storage']['PHPUnit']);

  foreach ($form_state['values'] as $class_name => $value) {
    // Since class_exists() will likely trigger an autoload lookup,
    // we do the fast check first.
    if ($value === 1 && class_exists($class_name)) {
      $test_type = in_array($class_name, $phpunit_all) ? 'UnitTest' : 'WebTest';
      $tests_list[$test_type][] = $class_name;
    }
  }
  if (count($tests_list) > 0 ) {
    $test_id = simpletest_run_tests($tests_list, 'drupal');
    $form_state['redirect'] = 'admin/config/development/testing/results/' . $test_id;
  }
  else {
    drupal_set_message(t('No test(s) selected.'), 'error');
  }
}

/**
 * Test results form for $test_id.
 */
function simpletest_result_form($form, &$form_state, $test_id) {
  // Make sure there are test results to display and a re-run is not being performed.
  $results = array();
  if (is_numeric($test_id) && !$results = simpletest_result_get($test_id)) {
    drupal_set_message(t('No test results to display.'), 'error');
    drupal_goto('admin/config/development/testing');
    return $form;
  }

  // Load all classes and include CSS.
  drupal_add_css(drupal_get_path('module', 'simpletest') . '/simpletest.css');

  // Keep track of which test cases passed or failed.
  $filter = array(
    'pass' => array(),
    'fail' => array(),
  );

  // Summary result widget.
  $form['result'] = array(
    '#type' => 'fieldset',
    '#title' => t('Results'),
  );
  $form['result']['summary'] = $summary = array(
    '#theme' => 'simpletest_result_summary',
    '#pass' => 0,
    '#fail' => 0,
    '#exception' => 0,
    '#debug' => 0,
  );

  simpletest_classloader_register();

  // Cycle through each test group.
  $header = array(t('Message'), t('Group'), t('Filename'), t('Line'), t('Function'), array('colspan' => 2, 'data' => t('Status')));
  $form['result']['results'] = array();
  foreach ($results as $group => $assertions) {
    // Create group details with summary information.
    $info = call_user_func(array($group, 'getInfo'));
    $form['result']['results'][$group] = array(
      '#type' => 'details',
      '#title' => $info['name'],
      '#description' => $info['description'],
    );
    $form['result']['results'][$group]['summary'] = $summary;
    $group_summary = &$form['result']['results'][$group]['summary'];

    // Create table of assertions for the group.
    $rows = array();
    foreach ($assertions as $assertion) {
      $row = array();
      $row[] = $assertion->message;
      $row[] = $assertion->message_group;
      $row[] = drupal_basename($assertion->file);
      $row[] = $assertion->line;
      $row[] = $assertion->function;
      $row[] = simpletest_result_status_image($assertion->status);

      $class = 'simpletest-' . $assertion->status;
      if ($assertion->message_group == 'Debug') {
        $class = 'simpletest-debug';
      }
      $rows[] = array('data' => $row, 'class' => array($class));

      $group_summary['#' . $assertion->status]++;
      $form['result']['summary']['#' . $assertion->status]++;
    }
    $form['result']['results'][$group]['table'] = array(
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $rows,
    );

    // Set summary information.
    $group_summary['#ok'] = $group_summary['#fail'] + $group_summary['#exception'] == 0;
    $form['result']['results'][$group]['#collapsed'] = $group_summary['#ok'];

    // Store test group (class) as for use in filter.
    $filter[$group_summary['#ok'] ? 'pass' : 'fail'][] = $group;
  }

  // Overal summary status.
  $form['result']['summary']['#ok'] = $form['result']['summary']['#fail'] + $form['result']['summary']['#exception'] == 0;

  // Actions.
  $form['#action'] = url('admin/config/development/testing/results/re-run');
  $form['action'] = array(
    '#type' => 'fieldset',
    '#title' => t('Actions'),
    '#attributes' => array('class' => array('container-inline')),
    '#weight' => -11,
  );

  $form['action']['filter'] = array(
    '#type' => 'select',
    '#title' => 'Filter',
    '#options' => array(
      'all' => t('All (@count)', array('@count' => count($filter['pass']) + count($filter['fail']))),
      'pass' => t('Pass (@count)', array('@count' => count($filter['pass']))),
      'fail' => t('Fail (@count)', array('@count' => count($filter['fail']))),
    ),
  );
  $form['action']['filter']['#default_value'] = ($filter['fail'] ? 'fail' : 'all');

  // Categorized test classes for to be used with selected filter value.
  $form['action']['filter_pass'] = array(
    '#type' => 'hidden',
    '#default_value' => implode(',', $filter['pass']),
  );
  $form['action']['filter_fail'] = array(
    '#type' => 'hidden',
    '#default_value' => implode(',', $filter['fail']),
  );

  $form['action']['op'] = array(
    '#type' => 'submit',
    '#value' => t('Run tests'),
  );

  $form['action']['return'] = array(
    '#type' => 'link',
    '#title' => t('Return to list'),
    '#href' => 'admin/config/development/testing',
  );

  if (is_numeric($test_id)) {
    simpletest_clean_results_table($test_id);
  }

  return $form;
}

/**
 * Re-run the tests that match the filter.
 */
function simpletest_result_form_submit($form, &$form_state) {
  $pass = $form_state['values']['filter_pass'] ? explode(',', $form_state['values']['filter_pass']) : array();
  $fail = $form_state['values']['filter_fail'] ? explode(',', $form_state['values']['filter_fail']) : array();

  if ($form_state['values']['filter'] == 'all') {
    $classes = array_merge($pass, $fail);
  }
  elseif ($form_state['values']['filter'] == 'pass') {
    $classes = $pass;
  }
  else {
    $classes = $fail;
  }

  if (!$classes) {
    $form_state['redirect'] = 'admin/config/development/testing';
    return;
  }

  $form_state_execute = array('values' => array());
  foreach ($classes as $class) {
    $form_state_execute['values'][$class] = 1;
  }

  simpletest_test_form_submit(array(), $form_state_execute);
  $form_state['redirect'] = $form_state_execute['redirect'];
}

/**
 * Prepares variables for the simpletest result's summary status templates.
 *
 * Default template: simpletest-result-summary.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 */
function template_preprocess_simpletest_result_summary(&$variables) {
  $form = $variables['form'];
  $variables['summary'] = _simpletest_format_summary_line($form);
  $variables['status'] = $form['#ok'] ? 'pass' : 'fail';
}

/**
 * Get test results for $test_id.
 *
 * @param $test_id The test_id to retrieve results of.
 * @return Array of results grouped by test_class.
 */
function simpletest_result_get($test_id) {
  $results = db_select('simpletest')
    ->fields('simpletest')
    ->condition('test_id', $test_id)
    ->orderBy('test_class')
    ->orderBy('message_id')
    ->execute();

  $test_results = array();
  foreach ($results as $result) {
    if (!isset($test_results[$result->test_class])) {
      $test_results[$result->test_class] = array();
    }
    $test_results[$result->test_class][] = $result;
  }
  return $test_results;
}

/**
 * Get the appropriate image for the status.
 *
 * @param $status Status string, either: pass, fail, exception.
 * @return HTML image or false.
 */
function simpletest_result_status_image($status) {
  // $map does not use drupal_static() as its value never changes.
  static $map;

  if (!isset($map)) {
    $map = array(
      'pass' => theme('image', array('uri' => 'core/misc/watchdog-ok.png', 'width' => 18, 'height' => 18, 'alt' => t('Pass'))),
      'fail' => theme('image', array('uri' => 'core/misc/watchdog-error.png', 'width' => 18, 'height' => 18, 'alt' => t('Fail'))),
      'exception' => theme('image', array('uri' => 'core/misc/watchdog-warning.png', 'width' => 18, 'height' => 18, 'alt' => t('Exception'))),
      'debug' => theme('image', array('uri' => 'core/misc/watchdog-warning.png', 'width' => 18, 'height' => 18, 'alt' => t('Debug'))),
    );
  }
  if (isset($map[$status])) {
    return $map[$status];
  }
  return FALSE;
}
